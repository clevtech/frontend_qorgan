/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/video_stream/offer/": {
    /** Create Video Stream */
    post: operations["create_video_stream_api_video_stream_offer__post"];
  };
  "/api/video_stream/check/": {
    /** Check Camera */
    post: operations["check_camera_api_video_stream_check__post"];
  };
  "/api/dashboard/": {
    /** Get Total Statistics */
    get: operations["get_total_statistics_api_dashboard__get"];
  };
  "/api/dashboard/configs/": {
    /** Get Configs */
    get: operations["get_configs_api_dashboard_configs__get"];
  };
  "/api/auth/sign-in/": {
    /** Login */
    post: operations["login_api_auth_sign_in__post"];
  };
  "/api/auth/refresh-token/": {
    /** Refresh Token */
    post: operations["refresh_token_api_auth_refresh_token__post"];
  };
  "/api/auth/sign-up/": {
    /** Sign Up */
    post: operations["sign_up_api_auth_sign_up__post"];
  };
  "/api/auth/me/": {
    /** Get Me */
    get: operations["get_me_api_auth_me__get"];
  };
  "/api/employees/": {
    /** Get Employees */
    get: operations["get_employees_api_employees__get"];
    /** Create Employee */
    post: operations["create_employee_api_employees__post"];
  };
  "/api/employees/{id}/": {
    /** Get Employee */
    get: operations["get_employee_api_employees__id___get"];
    /** Update Employee */
    put: operations["update_employee_api_employees__id___put"];
    /** Delete Employee */
    delete: operations["delete_employee_api_employees__id___delete"];
  };
  "/api/attendance/by-days/": {
    /** Get Attendance By Days */
    get: operations["get_attendance_by_days_api_attendance_by_days__get"];
  };
  "/api/attendance/by-days/details/": {
    /** Get Attendances */
    get: operations["get_attendances_api_attendance_by_days_details__get"];
  };
  "/api/attendance/by-days/details/{employeeId}/": {
    /** Get Attendances */
    get: operations["get_attendances_api_attendance_by_days_details__employeeId___get"];
  };
  "/api/attendance/by-employees/": {
    /** Get Attendance By Employees */
    get: operations["get_attendance_by_employees_api_attendance_by_employees__get"];
  };
  "/api/attendance/by-employees/{employeeId}/": {
    /** Get Attendance Employee */
    get: operations["get_attendance_employee_api_attendance_by_employees__employeeId___get"];
  };
  "/api/attendance/employee/{employeeId}/": {
    /** Update Attendance Employee */
    put: operations["update_attendance_employee_api_attendance_employee__employeeId___put"];
  };
  "/api/transports/": {
    /** Get Transports */
    get: operations["get_transports_api_transports__get"];
    /** Create Transport */
    post: operations["create_transport_api_transports__post"];
  };
  "/api/transports/{id}/": {
    /** Get Transport */
    get: operations["get_transport_api_transports__id___get"];
    /** Update Transport */
    put: operations["update_transport_api_transports__id___put"];
    /** Delete Transport */
    delete: operations["delete_transport_api_transports__id___delete"];
  };
  "/api/transport-tracking/": {
    /** Get Transport Trackings */
    get: operations["get_transport_trackings_api_transport_tracking__get"];
    /** Create Transport Tracking */
    post: operations["create_transport_tracking_api_transport_tracking__post"];
  };
  "/api/transport-tracking/{id}/": {
    /** Get Transport Tracking */
    get: operations["get_transport_tracking_api_transport_tracking__id___get"];
    /** Update Transport Tracking */
    put: operations["update_transport_tracking_api_transport_tracking__id___put"];
    /** Delete Transport Tracking */
    delete: operations["delete_transport_tracking_api_transport_tracking__id___delete"];
  };
  "/api/daily-orders/": {
    /** Get Daily Orders */
    get: operations["get_daily_orders_api_daily_orders__get"];
    /** Create Daily Order */
    post: operations["create_daily_order_api_daily_orders__post"];
  };
  "/api/daily-orders/{id}/": {
    /** Get Daily Order */
    get: operations["get_daily_order_api_daily_orders__id___get"];
    /** Update Daily Order */
    put: operations["update_daily_order_api_daily_orders__id___put"];
  };
  "/api/daily-orders/{id}/whitelists/": {
    /** Get White List From Id */
    get: operations["get_white_list_from_id_api_daily_orders__id__whitelists__get"];
  };
  "/api/whitelists/": {
    /** Get Whitelists */
    get: operations["get_whitelists_api_whitelists__get"];
    /** Create Whitelist */
    post: operations["create_whitelist_api_whitelists__post"];
  };
  "/api/whitelists/{id}/": {
    /** Get Whitelist */
    get: operations["get_whitelist_api_whitelists__id___get"];
    /** Update Whitelist */
    put: operations["update_whitelist_api_whitelists__id___put"];
    /** Delete Whitelist */
    delete: operations["delete_whitelist_api_whitelists__id___delete"];
  };
  "/api/whitelists/daily-order/{dailyOrderId}/": {
    /** Get All Whitelist */
    get: operations["get_all_whitelist_api_whitelists_daily_order__dailyOrderId___get"];
  };
  "/api/camera/": {
    /** Get Cameras */
    get: operations["get_cameras_api_cameras__get"];
    /** Create Camera */
    post: operations["create_camera_api_cameras__post"];
  };
  "/camera/{id}/": {
    /** Get Camera */
    get: operations["get_camera_api_cameras__id___get"];
    /** Update Camera */
    put: operations["update_camera_api_cameras__id___put"];
    /** Delete Camera */
    delete: operations["delete_camera_api_cameras__id___delete"];
  };
  "/api/incidents/": {
    /** Get Incidents */
    get: operations["get_incidents_api_incidents__get"];
    /** Create Incident */
    post: operations["create_incident_api_incidents__post"];
  };
  "/api/incidents/{id}/": {
    /** Get Incident */
    get: operations["get_incident_api_incidents__id___get"];
    /** Update Incident */
    put: operations["update_incident_api_incidents__id___put"];
    /** Delete Incident */
    delete: operations["delete_incident_api_incidents__id___delete"];
  };
  "/api/waybills/": {
    /** Get Waybills */
    get: operations["get_waybills_api_waybills__get"];
    /** Create Waybill */
    post: operations["create_waybill_api_waybills__post"];
  };
  "/api/waybills/{id}/": {
    /** Get Waybill */
    get: operations["get_waybill_api_waybills__id___get"];
    /** Update Waybill */
    put: operations["update_waybill_api_waybills__id___put"];
    /** Delete Waybill */
    delete: operations["delete_waybill_api_waybills__id___delete"];
  };
  "/api/face-checkpoints/": {
    /** Get Face Checkpoints */
    get: operations["get_face_checkpoints_api_face_checkpoints__get"];
    /** Create Face Checkpoint */
    post: operations["create_face_checkpoint_api_face_checkpoints__post"];
  };
  "/api/face-checkpoints/{id}/": {
    /** Get Face Checkpoint */
    get: operations["get_face_checkpoint_api_face_checkpoints__id___get"];
    /** Update Face Checkpoint */
    put: operations["update_face_checkpoint_api_face_checkpoints__id___put"];
    /** Delete Face Checkpoint */
    delete: operations["delete_face_checkpoint_api_face_checkpoints__id___delete"];
  };
  "/api/ml/car/": {
    /** Validate Car */
    post: operations["validate_car_api_ml_car__post"];
  };
  "/test/{room_id}/": {
    /** Test */
    get: operations["test_test__room_id___get"];
  };
  "/upload/video/": {
    /** Upload Video */
    post: operations["upload_video_upload_video__post"];
  };
  "/send/notification/{room_id}/": {
    /** Send Notification */
    post: operations["send_notification_send_notification__room_id___post"];
  };
  "/send/json/notification/{room_id}/": {
    /** Send Json Notification */
    post: operations["send_json_notification_send_json_notification__room_id___post"];
  };
  "/send/json/notification/all/": {
    /** Send Json Notification For All */
    post: operations["send_json_notification_for_all_send_json_notification_all__post"];
  };
  "/containers/": {
    /** Get Containers */
    get: operations["get_containers_containers__get"];
  };
  "/logs/": {
    /** Get Logs */
    get: operations["get_logs_logs__get"];
  };
  "/upload-image/": {
    /** Upload Image */
    post: operations["upload_image_upload_image__post"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** AttendanceRead */
    AttendanceRead: {
      /**
       * Created At
       * Format: date-time
       */
      createdAt: string;
      /**
       * Updated At
       * Format: date-time
       */
      updatedAt: string;
      /** ID */
      incident_id: string;
      /** Full Name */
      fullName: string;
      /** Phone Number */
      phoneNumber: string | null;
      /** Image Path */
      imgPath: string | null;
      /**
       * Late Count
       * @default 0
       */
      monthLateCount: number;
      /**
       * Year Count
       * @default 0
       */
      yearLateCount: number;
      /**
       * Time Of Late Count
       * @default 0
       */
      latenessTimeInMinutes: number;
      [key: string]: unknown;
    };
    /**
     * AttendanceType
     * @enum {string}
     */
    AttendanceType: "ПРИБЫЛ" | "ВРЕМЕННО ОТСУТСТВУЕТ" | "НЕЗАКОННО ОТСУТСТВУЕТ" | "НА БОЛЬНИЧНОМ" | "ПО РАПОРТУ" | "В ОТПУСКЕ" | "ОПОЗДАНИЕ" | "ОПОЗДАЛ";
    /** AttendanceUpdate */
    AttendanceUpdate: {
      /** Employee Id */
      employeeId?: string | null;
      /** Time Of Arrival */
      timeOfArrival: string | null;
      /** Status */
      status?: components["schemas"]["AttendanceType"] | null;
      /** Comment */
      comment?: string | null;
      /**
       * Date
       * @default 2024-08-27T19:19:00.409766
       */
      date?: string | null;
    };
    /** AttendancesEmployeeRead */
    AttendancesEmployeeRead: {
      /**
       * Late Count
       * @default 0
       */
      lateCount: number;
      /**
       * Month Late Count
       * @default 0
       */
      monthLateCount: number;
      /**
       * Pass Count
       * @default 0
       */
      passCount: number;
      /**
       * Late Percent
       * @default 0
       */
      latePercent: number;
      /** Total Count */
      totalCount: number;
      /** Summaries */
      summaries: components["schemas"]["SummaryDetailRead"][];
    };
    /** AttendancesRead */
    AttendancesRead: {
      /** Total Count */
      totalCount: number;
      /** Attendances */
      attendances: components["schemas"]["AttendanceRead"][];
    };
    /** Body_upload_image_upload_image__post */
    Body_upload_image_upload_image__post: {
      /**
       * File
       * Format: binary
       */
      file: string;
    };
    /** Body_upload_video_upload_video__post */
    Body_upload_video_upload_video__post: {
      /**
       * File
       * Format: binary
       */
      file: string;
    };
    /** CameraCreate */
    CameraCreate: {
      /** Name */
      name: string;
      /** Type Models */
      modules?: components["schemas"]["CameraModuleInput"][];
      /** Preview Path */
      previewPath?: string | null;
      /** Status */
      status?: boolean
      /** IP Address */
      ipAddress: string;
      /** Username */
      username?: string;
      /** Password */
      password?: string;
      [key: string]: unknown;
    };
    /** CameraModule */
    CameraModuleInput: {
      /**
       * Type Model
       * @default FACE_DETECTION
       */
      module?: components["schemas"]["CameraType"];
      /** Coordinates */
      coordinates?: components["schemas"]["CoordinatesBaseInput"][] | null;
      /** Count Of People */
      countOfPeople?: number | null;
    };
    /** CameraModule */
    CameraModuleOutput: {
      /**
       * Type Model
       * @default FACE_DETECTION
       */
      module: components["schemas"]["CameraType"];
      /** Coordinates */
      coordinates: components["schemas"]["CoordinatesBaseOutput"][] | null;
      /** Count Of People */
      countOfPeople: number | null;
    };
    /** CameraRead */
    CameraRead: {
      /**
       * Created At
       * Format: date-time
       */
      createdAt: string;
      /**
       * Updated At
       * Format: date-time
       */
      updatedAt: string;
      /** ID */
      id: string;
      /** Name */
      name: string;
      /** Type Models */
      modules: components["schemas"]["CameraModuleOutput"][];
      /** Preview Path */
      previewPath: string | null;
      /** Status */
      status: components["schemas"]["CameraStatus"];
      /** IP Address */
      ipAddress: string;
      _id: string;
    };
    /**
     * CameraStatus
     * @enum {string}
     */
    CameraStatus: "active" | "inactive";
    /**
     * CameraType
     * @enum {string}
     */
    CameraType: "FACE_DETECTION" | "CHECK_BLOCKED" | "CHECK_TOILET" | "CHECK_CROWD" | "CHECK_ABSENCE" | "CHECK_KHO" | "CHECK_LYING" | "CHECK_PLATE" | "CHECK_RUN";
    /** CameraUpdate */
    CameraUpdate: {
      /** Name */
      name?: string | null;
      /** Type Models */
      modules?: components["schemas"]["CameraModuleInput"][] | null;
      /** Preview Path */
      previewPath?: string | null;
      /** Status */
      status?: components["schemas"]["CameraStatus"] | null;
      /** Username */
      username?: string | null;
      /** Password */
      password?: string | null;
      [key: string]: unknown;
    };
    /** CamerasRead */
    CamerasRead: [];
    /** CoordinatesBase */
    CoordinatesBaseInput: {
      /** X */
      x?: number;
      /** Y */
      y?: number;
    };
    /** CoordinatesBase */
    CoordinatesBaseOutput: {
      /** X */
      x: number;
      /** Y */
      y: number;
    };
    /** DailyOrderCreate */
    DailyOrderCreate: {
      /** Goverment number */
      orderNumber?: string;
      /**
       * Date of sign document
       * Format: date-time
       */
      dateOfSign?: string;
      /**
       * Date of document
       * Format: date-time
       */
      onDate?: string;
      /** Signer of the document */
      dutyId?: string;
      /** Signer helper of the document */
      dutyHelperId?: string;
      /**
       * White list of employees
       * @default []
       */
      checkpointDuties?: string[];
      [key: string]: unknown;
    };
    /** DailyOrderRead */
    DailyOrderRead: {
      /**
       * Created At
       * Format: date-time
       */
      createdAt: string;
      /**
       * Updated At
       * Format: date-time
       */
      updatedAt: string;
      /** ID */
      id: string;
      /** Goverment number */
      orderNumber: string;
      /**
       * Date of sign document
       * Format: date-time
       */
      dateOfSign: string;
      /**
       * Date of document
       * Format: date-time
       */
      onDate: string;
      /** Signer of the document */
      dutyId: string;
      /** Signer helper of the document */
      dutyHelperId: string;
      /** Signer full name */
      dutyFullName: string;
      /** Signer helper full name */
      dutyHelperFullName: string;
      /**
       * White list of employees
       * @default []
       */
      checkpointDuties: string[];
      /** Signer full name */
      signerFullName: string;
    };
    /** DailyOrderUpdate */
    DailyOrderUpdate: {
      /** Goverment number */
      orderNumber?: string;
      /**
       * Date of sign document
       * Format: date-time
       */
      dateOfSign?: string;
      /**
       * Date of document
       * Format: date-time
       */
      onDate?: string;
      /** Signer of the document */
      dutyId?: string;
      /** Signer helper of the document */
      dutyHelperId?: string;
      /**
       * White list of employees
       * @default []
       */
      checkpointDuties?: string[];
    };
    /** DailyOrdersRead */
    DailyOrdersRead: {
      /** Total Count */
      totalCount: number;
      /** List of daily orders */
      dailyOrders: components["schemas"]["DailyOrderRead"][];
    };
    /** EmployeeCreate */
    EmployeeCreate: {
      /** Full Name */
      fullName?: string;
      /** Phone Number */
      phoneNumber?: string | null;
      /**
       * Role
       * @default employee
       */
      role?: components["schemas"]["EmployeeRole"];
      /** Image Path */
      imgPath?: string | null;
    };
    /** EmployeeRead */
    EmployeeRead: {
      /**
       * Created At
       * Format: date-time
       */
      createdAt: string;
      /**
       * Updated At
       * Format: date-time
       */
      updatedAt: string;
      /** ID */
      id: string;
      /** Full Name */
      fullName: string;
      /** Phone Number */
      phoneNumber: string | null;
      /** Image Path */
      imgPath: string | null;
    };
    /**
     * EmployeeRole
     * @enum {string}
     */
    EmployeeRole: "employee" | "guest" | "administrator" | "duty" | "dutyHelper";
    /** EmployeeUpdate */
    EmployeeUpdate: {
      /** Full Name */
      fullName?: string;
      /** Phone Number */
      phoneNumber?: string | null;
      /**
       * Role
       * @default employee
       */
      role?: components["schemas"]["EmployeeRole"];
      /** Image Path */
      imgPath?: string | null;
    };
    /** EmployeeUserMe */
    EmployeeUserMe: {
      /** Employee */
      employee: components["schemas"]["EmployeeRead"] | null;
      /** Employee Helper */
      employeeHelper: components["schemas"]["EmployeeRead"] | null;
      /** Administrator */
      administrator: components["schemas"]["EmployeeRead"] | null;
    };
    /** EmployeesRead */
    EmployeesRead: {
      /** Total Count */
      totalCount: number;
      /** Employees */
      employees: components["schemas"]["EmployeeRead"][];
    };
    /**
     * FaceCheckPointType
     * @enum {string}
     */
    FaceCheckPointType: "Вход" | "Выход";
    /** FaceCheckpointCreate */
    FaceCheckpointCreate: {
      /** Employee ID */
      personId?: string | null;
      /** Camera ID */
      cameraId?: string;
      /** Comment */
      comment?: string | null;
      /**
       * Date of pass
       * Format: date-time
       */
      dateOfPass?: string;
      /** Type of pass */
      typeOfPass?: components["schemas"]["FaceCheckPointType"];
      /**
       * Image Path
       * @default https://picsum.photos/200
       */
      imgPath?: string;
    };
    /** FaceCheckpointRead */
    FaceCheckpointRead: {
      /**
       * Created At
       * Format: date-time
       */
      createdAt: string;
      /**
       * Updated At
       * Format: date-time
       */
      updatedAt: string;
      /** ID */
      id: string;
      /** Employee ID */
      personId: string | null;
      /** Camera ID */
      cameraId: string;
      /** Comment */
      comment: string | null;
      /**
       * Date of pass
       * Format: date-time
       */
      dateOfPass: string;
      /** Type of pass */
      typeOfPass: components["schemas"]["FaceCheckPointType"];
      /**
       * Image Path
       * @default https://picsum.photos/200
       */
      imgPath: string;
      /** person full name */
      personFullName: string | null;
      /** Employee role */
      personRole: string | null;
      /** Camera name */
      cameraName: string | null;
    };
    /** FaceCheckpointUpdate */
    FaceCheckpointUpdate: {
      /** Employee ID */
      personId?: string | null;
      /** Camera ID */
      cameraId?: string;
      /** Comment */
      comment?: string | null;
      /**
       * Date of pass
       * Format: date-time
       */
      dateOfPass?: string;
      /** Type of pass */
      typeOfPass?: components["schemas"]["FaceCheckPointType"];
      /**
       * Image Path
       * @default https://picsum.photos/200
       */
      imgPath?: string;
    };
    /** FaceCheckpointsRead */
    FaceCheckpointsRead: {
      /** Total Count */
      totalCount: number;
      /** Total of departure */
      entranceTotal: number;
      /** Total of end pass */
      exitTotal: number;
      /** Items */
      items: components["schemas"]["FaceCheckpointRead"][];
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /** IncidentCreate */
    IncidentCreate: {
      /** Type Of Incident */
      typeOfIncident?: components["schemas"]["IncidentType"];
      /** Camera, Id */
      cameraId?: string;
      /** Comment */
      comment?: string | null;
      /** Incident Image */
      incidentImgPath?: string | null;
      /** Incident Video */
      incidentVideoPath?: string | null;
      /** Response Time */
      responseTime?: string | null;
      /**
       * Incident Number
       * @default 0
       */
      incidentNumber?: number | null;
    };
    /** IncidentRead */
    IncidentRead: {
      /**
       * Created At
       * Format: date-time
       */
      createdAt: string;
      /**
       * Updated At
       * Format: date-time
       */
      updatedAt: string;
      /** ID */
      incident_id: string;
      /** Type Of Incident */
      typeOfIncident: components["schemas"]["IncidentType"];
      /** Camera, Id */
      cameraId: string;
      /** Comment */
      comment: string | null;
      /** Incident Image */
      incidentImgPath: string | null;
      /** Incident Video */
      incidentVideoPath: string | null;
      /** Camera Name */
      cameraName: string;
      /**
       * Incident Number
       * @default 0
       */
      incidentNumber: number;
      /** Response Time */
      responseTime: string | null;
    };
    /**
     * IncidentType
     * @enum {string}
     */
    IncidentType: "Блокирование камеры" | "Несанкционированный вход" | "Камера" | "Несанкционированный вход (КХО)" | "Несанкционированный выход" | "Пост дневального" | "Толпа" | "Человек в лежащем положении" | "Продолжительное нахождение военнослужащего в помещении" | "Суточный приказ" | "Сигнал";
    /** IncidentUpdate */
    IncidentUpdate: {
      /** Type Of Incident */
      typeOfIncident?: components["schemas"]["IncidentType"];
      /** Camera, Id */
      cameraId?: string;
      /** Comment */
      comment?: string | null;
      /** Incident Image */
      incidentImgPath?: string | null;
      /** Incident Video */
      incidentVideoPath?: string | null;
      [key: string]: unknown;
    };
    /** IncidentsRead */
    IncidentsRead: {
      /** Total Count */
      totalCount: number;
      /**
       * Incidents
       * @default []
       */
      incidents: components["schemas"]["IncidentRead"][];
    };
    /** MissingPerson */
    MissingPerson: {
      /** Status */
      status: components["schemas"]["AttendanceType"];
      /**
       * Count
       * @default 0
       */
      count: number;
    };
    /** NameBase */
    NameBase: {
      /** Name */
      name: string;
    };
    /**
     * ReasonType
     * @enum {string}
     */
    ReasonType: "В отпуске" | "По рапорту" | "На больничном";
    /** StreamCheckCreate */
    StreamCheckCreate: {
      /** Ipaddress */
      ipAddress: string;
      /** Username */
      username: string;
      /** Password */
      password: string;
    };
    /** StreamCheckRead */
    StreamCheckRead: {
      /** Detail */
      isWorking: boolean;
      /** Detail */
      previewPath: string | null;
    };
    /** SummariesDetailEmployeeRead */
    SummariesDetailEmployeeRead: {
      /** Total Count */
      totalCount: number;
      /** Summaries */
      summaries: components["schemas"]["SummaryDetailRead"][];
    };
    /** SummariesDetailRead */
    SummariesDetailRead: {
      /** Total Count */
      totalCount: number;
      /** Summaries */
      summaries: components["schemas"]["SummaryDetailRead"][];
    };
    /** SummariesRead */
    SummariesRead: {
      /** Total Count */
      totalCount: number;
      /** Items */
      summaries: components["schemas"]["SummaryRead"][];
    };
    /** SummaryDetailRead */
    SummaryDetailRead: {
      /** ID */
      id: string;
      /** Employee Id */
      employeeId: string;
      /** Time Of Arrival */
      timeOfArrival: string | null;
      /** Status */
      status: components["schemas"]["AttendanceType"] | null;
      /** Comment */
      comment: string | null;
      /**
       * Date
       * @default 2024-08-27T19:19:00.409766
       */
      date: string | null;
      /** Employee Full Name */
      employeeFullName: string | null;
      /** Phone Number */
      phoneNumber: string;
    };
    /** SummaryRead */
    SummaryRead: {
      /**
       * Created At
       * Format: date-time
       */
      createdAt: string;
      /**
       * Updated At
       * Format: date-time
       */
      updatedAt: string;
      /**
       * Date
       * Format: date-time
       */
      date: string;
      /**
       * Employee Count
       * @default 0
       */
      employeeCount: number;
      /**
       * Arrived Count
       * @default 0
       */
      arrivedCount: number;
      /**
       * Late Count
       * @default 0
       */
      latecomersCount: number;
      /**
       * Missing Count
       * @default 0
       */
      absenceCount: number;
      /** ID */
      id: string;
      /** Duty Name */
      dutyFullName: string;
      /** Duty Helper Name */
      dutyHelperFullName: string;
    };
    /** TotalStatistics */
    TotalStatistics: {
      /**
       * Employees Count
       * @default 0
       */
      employeeCount: number;
      /**
       * Arrived Count
       * @default 0
       */
      arrivedCount: number;
      /**
       * Late Count
       * @default 0
       */
      lateCount: number;
      /**
       * Transport On Territory Count
       * @default 0
       */
      transportOnTerritoryCount: number;
      /**
       * Transport On Territory
       * @default []
       */
      transportOnTerritory: components["schemas"]["TransportTrackingRead"][];
      /**
       * Transport Outside Territory Count
       * @default 0
       */
      transportOutsideTerritoryCount: number;
      /**
       * Transport Outside Territory
       * @default []
       */
      transportOutsideTerritory: components["schemas"]["TransportTrackingRead"][];
      /**
       * Incidents Of Day Count
       * @default 0
       */
      incidentsOfDayCount: number;
      /**
       * Incidents Of Day
       * @default []
       */
      incidentsOfDay: components["schemas"]["IncidentRead"][];
      /**
       * Late Persons
       * @default []
       */
      latePersons: components["schemas"]["SummaryDetailRead"][];
      /**
       * Missing Count
       * @default 0
       */
      missingCount: number;
      /**
       * Missing Persons
       * @default {
       *   "count": 0
       * }
       */
      missingPersons: components["schemas"]["MissingPerson"][];
      /**
       * Date
       * Format: date-time
       */
      date: string;
      /** Duty Name */
      dutyFullName: string | null;
      /** Duty Helper Name */
      dutyHelperFullName: string | null;
    };
    /** TransportCreate */
    TransportCreate: {
      /** Name */
      model: string;
      /** Gov Number */
      plate?: string;

      /** Organization Number */
      organization?: string;
    };
    /** TransportRead */
    TransportRead: {
      /**
       * Created At
       * Format: date-time
       */
      createdAt: string;
      /**
       * Updated At
       * Format: date-time
       */
      updatedAt: string;
      /** ID */
      id: string;
      /** Name */
      model: string;
      /** Gov Number */
      plate: string;
      /** Organization */
      organization: string;
    };
    /** TransportTrackingCreate */
    TransportTrackingCreate: {
      /** Transport ID */
      transportId?: string;
      /** Date of departure */
      dateOfDeparture?: string | null;
      /** Date of end pass */
      dateOfEndPass?: string | null;
      /**
       * Is departure allowed
       * @default true
       */
      isDepartureAllowed?: boolean | null;
      /** Transport type */
      transportTrackingType?: components["schemas"]["TransportTrackingType"] | null;
    };
    /** TransportTrackingRead */
    TransportTrackingRead: {
      /**
       * Created At
       * Format: date-time
       */
      createdAt: string;
      /**
       * Updated At
       * Format: date-time
       */
      updatedAt: string;
      /** ID */
      id: string;
      /** Transport ID */
      transportId: string;
      /** Date of departure */
      dateOfDeparture: string | null;
      /** Date of end pass */
      dateOfEndPass: string | null;
      /**
       * Is departure allowed
       * @default true
       */
      isDepartureAllowed: boolean | null;
      /** Transport type */
      transportTrackingType: components["schemas"]["TransportTrackingType"] | null;
      /** Transport name */
      transportName: string | null;
      /** Transport gov number */
      transportGovNumber: string | null;
    };
    /**
     * TransportTrackingType
     * @enum {string}
     */
    TransportTrackingType: "На территории" | "Вне территории";
    /** TransportTrackingUpdate */
    TransportTrackingUpdate: {
      /** Transport ID */
      transportId?: string;
      /** Date of departure */
      dateOfDeparture?: string | null;
      /** Date of end pass */
      dateOfEndPass?: string | null;
      /**
       * Is departure allowed
       * @default true
       */
      isDepartureAllowed?: boolean | null;
      /** Transport type */
      transportTrackingType?: components["schemas"]["TransportTrackingType"] | null;
    };
    /** TransportTrackingsRead */
    TransportTrackingsRead: {
      /** Total Count */
      totalCount: number;
      /** Items */
      items: components["schemas"]["TransportTrackingRead"][];
    };
    /** TransportUpdate */
    TransportUpdate: {
      /** Name */
      model?: string | null;
      /** Gov Number */
      plate?: string | null;
      /** Organization */
      organization?: string | null;
    };
    /** TransportsRead */
    TransportsRead: {
      /** Total Count */
      totalCount: number;
      /** Items */
      transports: components["schemas"]["TransportRead"][];
    };
    /** UserLoginBase */
    UserLoginBase: {
      /** Username */
      username: string;
      /** Password */
      password: string;
    };
    /** UserOutLogin */
    UserOutLogin: {
      /** Access Token */
      access_token: string;
      /** Refresh Token */
      refresh_token: string;
    };
    /** UserRefreshToken */
    UserRefreshToken: {
      /** Refresh Token */
      refresh_token: string;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
    /** VideoStreamModelCreate */
    VideoStreamModelCreate: {
      /** Sdp */
      sdp: string;
      /** Type */
      type: string;
      /** Cameraid */
      cameraId: string;
    };
    /** VideoStreamModelRead */
    VideoStreamModelRead: {
      /** Sdp */
      sdp: string;
      /** Type */
      type: string;
    };
    /** WaybillCreate */
    WaybillCreate: {
      /** Number waybill */
      numberWaybill?: string;
      /** Transport id */
      transportId?: string;
      /**
       * Date of departure
       * Format: date-time
       */
      dateOfDeparture?: string;
      /**
       * Date of arrival
       * Format: date-time
       */
      dateOfArrival?: string;
      /** Driver id */
      driverId?: string;
      /** Comment */
      comment?: string | null;
      /** Signerid */
      signerId?: string;
    };
    /** WaybillRead */
    WaybillRead: {
      /**
       * Created At
       * Format: date-time
       */
      createdAt: string;
      /**
       * Updated At
       * Format: date-time
       */
      updatedAt: string;
      /** ID */
      id: string;
      /** Number waybill */
      numberWaybill: string;
      /** Transport id */
      transportId: string;
      /**
       * Date of departure
       * Format: date-time
       */
      dateOfDeparture: string;
      /**
       * Date of arrival
       * Format: date-time
       */
      dateOfArrival: string;
      /** Driver id */
      driverId: string;
      /** Comment */
      comment: string | null;
      /** Signerid */
      signerId: string;
      /** Signer full name */
      signerFullName: string;
      /** Transport name */
      transportName: string;
      /** Transport gov name */
      transportGovNumber: string;
    };
    /** WaybillUpdate */
    WaybillUpdate: {
      /** Number waybill */
      numberWaybill?: string;
      /** Transport id */
      transportId?: string;
      /**
       * Date of departure
       * Format: date-time
       */
      dateOfDeparture?: string;
      /**
       * Date of arrival
       * Format: date-time
       */
      dateOfArrival?: string;
      /** Driver id */
      driverId?: string;
      /** Comment */
      comment?: string | null;
      /** Signerid */
      signerId?: string;
    };
    /** WaybillsRead */
    WaybillsRead: {
      /** Total Count */
      totalCount: number;
      /** Items */
      items: components["schemas"]["WaybillRead"][];
    };
    /** WhiteListCreate */
    WhiteListCreate: {
      /** Employee id */
      employeeId?: string;
      /**
       * Start date
       * Format: date-time
       */
      startDate?: string;
      /**
       * End date
       * Format: date-time
       */
      endDate?: string;
      /** Reason */
      reason?: components["schemas"]["ReasonType"];
    };
    /** WhiteListRead */
    WhiteListRead: {
      /**
       * Created At
       * Format: date-time
       */
      createdAt: string;
      /**
       * Updated At
       * Format: date-time
       */
      updatedAt: string;
      /** ID */
      id: string;
      /** Employee id */
      employeeId: string;
      /**
       * Start date
       * Format: date-time
       */
      startDate: string;
      /**
       * End date
       * Format: date-time
       */
      endDate: string;
      /** Reason */
      reason: components["schemas"]["ReasonType"];
      /** Employee full name */
      employeeFullName: string;
      /** Img path */
      imgPath: string | null;
    };
    /** WhiteListUpdate */
    WhiteListUpdate: {
      /** Employee id */
      employeeId?: string;
      /**
       * Start date
       * Format: date-time
       */
      startDate?: string;
      /**
       * End date
       * Format: date-time
       */
      endDate?: string;
      /** Reason */
      reason?: components["schemas"]["ReasonType"];
    };
    /** WhiteListsRead */
    WhiteListsRead: {
      /** Total Count */
      totalCount: number;
      /**
       * White list of employees
       * @default []
       */
      whitelists: components["schemas"]["WhiteListRead"][];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Create Video Stream */
  create_video_stream_api_video_stream_offer__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["VideoStreamModelCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["VideoStreamModelRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Check Camera */
  check_camera_api_video_stream_check__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["StreamCheckCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["StreamCheckRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Total Statistics */
  get_total_statistics_api_dashboard__get: {
    parameters: {
      query?: {
        date?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TotalStatistics"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Configs */
  get_configs_api_dashboard_configs__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["NameBase"];
        };
      };
    };
  };
  /** Login */
  login_api_auth_sign_in__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserLoginBase"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserOutLogin"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Refresh Token */
  refresh_token_api_auth_refresh_token__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserRefreshToken"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserOutLogin"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Sign Up */
  sign_up_api_auth_sign_up__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserLoginBase"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserOutLogin"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Me */
  get_me_api_auth_me__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["EmployeeUserMe"];
        };
      };
    };
  };
  /** Get Employees */
  get_employees_api_employees__get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
        fullName?: string;
        phoneNumber?: string;
        role?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["EmployeesRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create Employee */
  create_employee_api_employees__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["EmployeeCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["EmployeeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Employee */
  get_employee_api_employees__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["EmployeeRead"] | null;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update Employee */
  update_employee_api_employees__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EmployeeUpdate"];
      };
    };
    responses: {
      /** @description Employee updated successfully */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Employee not found */
      404: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete Employee */
  delete_employee_api_employees__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Attendance By Days */
  get_attendance_by_days_api_attendance_by_days__get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
        dateFrom?: string;
        dateTo?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SummariesRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Attendances */
  get_attendances_api_attendance_by_days_details__get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
        status?: string;
        excludeStatus?: boolean;
        date?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SummariesDetailRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Attendances */
  get_attendances_api_attendance_by_days_details__employeeId___get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
      path: {
        employeeId: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SummariesDetailEmployeeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Attendance By Employees */
  get_attendance_by_employees_api_attendance_by_employees__get: {
    parameters: {
      id?: string;
      query?: {
        skip?: number;
        limit?: number;
        role?: string;
        id?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AttendancesRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Attendance Employee */
  get_attendance_employee_api_attendance_by_employees__employeeId___get: {
    parameters: {
      path: {
        employeeId: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AttendancesEmployeeRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update Attendance Employee */
  update_attendance_employee_api_attendance_employee__employeeId___put: {
    parameters: {
      path: {
        employeeId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AttendanceUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Transports */
  get_transports_api_transports__get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
        model?: string; 
        plate?: string;
        organization?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TransportsRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create Transport */
  create_transport_api_transports__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransportCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["TransportRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Transport */
  get_transport_api_transports__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TransportRead"] | null;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update Transport */
  update_transport_api_transports__id___put: {
    parameters: {
      path: {
        _id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransportUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete Transport */
  delete_transport_api_transports__id___delete: {
    parameters: {
      path: {
        _id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Transport Trackings */
  get_transport_trackings_api_transport_tracking__get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
        govNumber?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TransportTrackingsRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create Transport Tracking */
  create_transport_tracking_api_transport_tracking__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransportTrackingCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["TransportTrackingRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Transport Tracking */
  get_transport_tracking_api_transport_tracking__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TransportTrackingRead"] | null;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update Transport Tracking */
  update_transport_tracking_api_transport_tracking__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransportTrackingUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TransportTrackingRead"] | null;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete Transport Tracking */
  delete_transport_tracking_api_transport_tracking__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Daily Orders */
  get_daily_orders_api_daily_orders__get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
        govNumber?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DailyOrdersRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create Daily Order */
  create_daily_order_api_daily_orders__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DailyOrderCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["DailyOrderRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Daily Order */
  get_daily_order_api_daily_orders__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DailyOrderRead"] | null;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update Daily Order */
  update_daily_order_api_daily_orders__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DailyOrderUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get White List From Id */
  get_white_list_from_id_api_daily_orders__id__whitelists__get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["WhiteListsRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Whitelists */
  get_whitelists_api_whitelists__get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["WhiteListsRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create Whitelist */
  create_whitelist_api_whitelists__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["WhiteListCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["WhiteListRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Whitelist */
  get_whitelist_api_whitelists__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["WhiteListRead"] | null;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update Whitelist */
  update_whitelist_api_whitelists__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["WhiteListUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["WhiteListRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete Whitelist */
  delete_whitelist_api_whitelists__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["WhiteListRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get All Whitelist */
  get_all_whitelist_api_whitelists_daily_order__dailyOrderId___get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
      path: {
        dailyOrderId: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["WhiteListsRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Cameras */
  get_cameras_api_cameras__get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CamerasRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create Camera */
  create_camera_api_cameras__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CameraCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["CameraRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Camera */
  get_camera_api_cameras__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CameraRead"] | null;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update Camera */
  update_camera_api_cameras__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CameraUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete Camera */
  delete_camera_api_cameras__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Incidents */
  get_incidents_api_incidents__get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
        typeOfIncident?: string | null;
        cameraId?: string | null;
        date_from?: string | null;
        date_to?: string | null;
        responseTime?: string;
        comment?: string;
        isFavourite?: boolean;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["IncidentsRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create Incident */
  create_incident_api_incidents__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["IncidentCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["IncidentRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Incident */
  get_incident_api_incidents__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["IncidentRead"] | null;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update Incident */
  update_incident_api_incidents__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["IncidentUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["IncidentRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete Incident */
  delete_incident_api_incidents__id___delete: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Waybills */
  get_waybills_api_waybills__get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["WaybillsRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create Waybill */
  create_waybill_api_waybills__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["WaybillCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["WaybillRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Waybill */
  get_waybill_api_waybills__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["WaybillRead"] | null;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update Waybill */
  update_waybill_api_waybills__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["WaybillUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["WaybillRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete Waybill */
  delete_waybill_api_waybills__id___delete: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["WaybillRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Face Checkpoints */
  get_face_checkpoints_api_face_checkpoints__get: {
    parameters: {
      query?: {
        skip?: number;
        limit?: number;
        dateOfPass?: string;
        typeOfPass?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["FaceCheckpointsRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create Face Checkpoint */
  create_face_checkpoint_api_face_checkpoints__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["FaceCheckpointCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["FaceCheckpointRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Face Checkpoint */
  get_face_checkpoint_api_face_checkpoints__id___get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["FaceCheckpointRead"] | null;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update Face Checkpoint */
  update_face_checkpoint_api_face_checkpoints__id___put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FaceCheckpointUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["FaceCheckpointsRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete Face Checkpoint */
  delete_face_checkpoint_api_face_checkpoints__id___delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Validate Car */
  validate_car_api_ml_car__post: {
    parameters: {
      query: {
        car_gov_number: string;
        typeOfPass?: boolean;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Test */
  test_test__room_id___get: {
    parameters: {
      path: {
        room_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Upload Video */
  upload_video_upload_video__post: {
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["Body_upload_video_upload_video__post"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Send Notification */
  send_notification_send_notification__room_id___post: {
    parameters: {
      query: {
        message: string;
      };
      path: {
        room_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Send Json Notification */
  send_json_notification_send_json_notification__room_id___post: {
    requestBody: {
      content: {
        "application/json": Record<string, never>;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Send Json Notification For All */
  send_json_notification_for_all_send_json_notification_all__post: {
    requestBody: {
      content: {
        "application/json": Record<string, never>;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Containers */
  get_containers_containers__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /** Get Logs */
  get_logs_logs__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /** Upload Image */
  upload_image_upload_image__post: {
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["Body_upload_image_upload_image__post"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
}
